function [fn, FnVar, FnGrad, FnGradCov, constraint, ConstraintCov, ConstraintGrad, ConstraintGradCov, r_ws] = WINDHOWLAND(theta, runlength, problemRng, seed, m_rep)

FnGrad = NaN;
FnGradCov = NaN;
constraint = NaN;
ConstraintCov = NaN;
ConstraintGrad = NaN;
ConstraintGradCov = NaN;
r_ws = NaN;

% Initialize the variables at the start of first function call 
currData = readmatrix('Ding_Pair1_filtered');

currData(:,1) = [];
currData(:,3) = max(currData(:,1), currData(:,2));    bin1Stream = problemRng{1};

    [sort_ws, idx_ws] = sort(currData(:,1));
    sort_currData = currData(idx_ws,:);
    bin_1 = sort_currData((sort_currData(:,1)<=min(sort_ws)+(max(sort_ws) - min(sort_ws))/4),:);
    bin_2 = sort_currData((sort_currData(:,1)<=min(sort_ws)+2*(max(sort_ws) - min(sort_ws))/4) & (sort_currData(:,1)>min(sort_ws)+(max(sort_ws) - min(sort_ws))/4) ,:);
    bin_3 = sort_currData((sort_currData(:,1)<=min(sort_ws)+3*(max(sort_ws) - min(sort_ws))/4) & (sort_currData(:,1)>min(sort_ws)+2*(max(sort_ws) - min(sort_ws))/4) ,:);
    bin_4 = sort_currData((sort_currData(:,1)<=max(sort_ws)& (sort_currData(:,1)>min(sort_ws)+3*(max(sort_ws) - min(sort_ws))/4)),:);
    bin1_idx = idx_ws(1:length(bin_1));
    bin2_idx = idx_ws(length(bin_1)+1:length(bin_2)+length(bin_1));
    bin3_idx = idx_ws(length(bin_2)+length(bin_1)+1:length(bin_3)+length(bin_2)+length(bin_1));
    bin4_idx = idx_ws(length(bin_3)+length(bin_2)+length(bin_1)+1:length(bin_4)+length(bin_3)+length(bin_2)+length(bin_1));
    N = size(sort_currData,1);
    % Standard deviation of power generated by all the turbines within bins
    std_bins = [std2(bin_1(:,6:end)), std2(bin_2(:,6:end)), std2(bin_3(:,6:end)), std2(bin_4(:,6:end))];
    prob_bins = [size(bin_1,1)/N size(bin_2,1)/N size(bin_3,1)/N size(bin_4,1)/N];
    wt_bins = [std_bins(1)*prob_bins(1)/sum(prob_bins.*std_bins) std_bins(2)*prob_bins(2)/sum(prob_bins.*std_bins) std_bins(3)*prob_bins(3)/sum(prob_bins.*std_bins) std_bins(4)*prob_bins(4)/sum(prob_bins.*std_bins)];

    bin1Stream = problemRng{1};
    bin2Stream = problemRng{2};
    bin3Stream = problemRng{3};
    bin4Stream = problemRng{4};

%% Calling the windcode
if size(runlength,2) == 1
if (runlength <= 0) || (runlength ~= round(runlength)) || (seed <= 0) || (round(seed) ~= seed)
    fprintf('runlength should be positive integer, seed must be a positive integer\n');
    fn = NaN;
    FnVar = NaN;
else 
    mean_err = zeros(runlength,1);
    nr = floor(wt_bins*runlength);
    nr = cumsum(nr);
    if max(nr) < runlength
        nr(end) = runlength;
    end
    for k = 1:runlength
    if size(theta,2) == 1
        
        if m_rep == 0
        theta_i = cell2mat(theta);
        if k <= nr(1)
            bin1Stream.Substream = seed + k - 1;
            RandStream.setGlobalStream(bin1Stream);
            sampled_data = datasample(bin_1,1);
        elseif  k > nr(1) && k <= nr(2)
            bin2Stream.Substream = seed + k - 1;
            RandStream.setGlobalStream(bin2Stream);
            sampled_data = datasample(bin_2,1);
        elseif k > nr(2) && k <= nr(3)
            bin3Stream.Substream = seed + k - 1;
            RandStream.setGlobalStream(bin3Stream);
            sampled_data = datasample(bin_3,1);
        else
            bin4Stream.Substream = seed + k - 1;
            RandStream.setGlobalStream(bin4Stream);
            sampled_data = datasample(bin_4,1);
        end
        % test data set
        test = sampled_data(:,3:4); 
        test_actual = sampled_data(:,5:6); 
        post_sample = sampled_data;
        test_pred = windCode(theta_i(1), theta_i(2), test(2), test(1));
        test_size = size(post_sample,1);
        else
        if m_rep >= 10
             load(strcat('testData0',int2str(m_rep),'.mat'));
        else
            load(strcat('testData00',int2str(m_rep),'.mat'));
        end
%         testData = readmatrix('WindDataSPlitTestwo');
%         testData(:,1) = [];
%         mData = mean2(testData(:,6:41));
%         stdData = std2(testData(:,6:41));
%         testData(:,6:41) = (testData(:,6:41) - mData)/stdData;
%         testData = currData; 
        binStream = problemRng{1};
        binStream.Substream = seed + k - 1;
        RandStream.setGlobalStream(binStream);
%         post_sample = datasample(testData,test_size);
        post_sample = testData;
        
        % test data set
        test = post_sample(:,3:4); 
        test_actual = post_sample(:,5:6);
        test_pred = windCode(theta(1), theta(2), test(2), test(1));
        test_size = size(post_sample,1);
        end
        % row 1 = 1:9
        % row 2 = 10:17
        % row 3 = 18:36
        err = zeros(1, test_size);
        for i = 1:test_size
            err(i) = mean((test_actual(i,:) - test_pred(i,:)).^2);
        end

        mean_err(k) = mean(err);    
    else
        % pick n_bins_int(i) data points from ith bin
    if cell2mat(theta(3)) == 0
        sample_data = cell2mat(theta(2));
        theta_o = cell2mat(theta(1));
        test = sample_data(:,3:4);
        test_actual = sample_data(:,5:6);
        test_pred = windCode(theta_o(1), theta_o(2), test(2), test(1));
        err = mean((test_actual-test_pred).^2);
        mean_err(k) = mean(err);
    else
        sample_data = cell2mat(theta(2));
        theta_o = cell2mat(theta(1));
        bin_no = cell2mat(theta(3));
        binStream = problemRng{bin_no};
        binStream.Substream = seed + k - 1;
        RandStream.setGlobalStream(binStream);
        sample_bin_data = datasample(sample_data, 1);
        r_ws = sample_bin_data(1);
        test = sample_bin_data(:,3:4);
        test_actual = sample_bin_data(:,5:6);
        test_pred = windCode(theta_o(1), theta_o(2), test(2), test(1));
        err = mean((test_actual-test_pred).^2);
        mean_err(k) = mean(err);
    end  
    end           
    end
    if runlength == 1
        fn = mean_err;
        FnVar = var(err)/runlength;
    else
        fn = mean(mean_err);
        FnVar = var(mean_err)/runlength;
    end 
end
else
    N = runlength;
    FnVar = NaN;
    bin1Stream.Substream = seed;
    RandStream.setGlobalStream(bin1Stream);
    bin1_test_idx = bin1_idx(randperm(size(bin_1,1),N(1)));
    bin1_test = currData(bin1_test_idx,1:2);

    bin2Stream.Substream = seed;
    RandStream.setGlobalStream(bin2Stream);
    bin2_test_idx = bin2_idx(randperm(size(bin_2,1),N(2)));
    bin2_test = currData(bin2_test_idx,1:2);

     bin3Stream.Substream = seed;
     RandStream.setGlobalStream(bin3Stream);
     bin3_test_idx = bin3_idx(randperm(size(bin_3,1),N(3)));
     bin3_test = currData(bin3_test_idx,1:2);

     bin4Stream.Substream = seed;
     RandStream.setGlobalStream(bin4Stream);
     bin4_test_idx = bin4_idx(randperm(size(bin_4,1),N(4)));
     bin4_test = currData(bin4_test_idx,1:2);

    test = [bin1_test; bin2_test; bin3_test; bin4_test]; 
    test_index = [bin1_test_idx; bin2_test_idx; bin3_test_idx; bin4_test_idx];
    test_actual = currData(test_index, 18:end); % only include turbines X13 - X36
    test_pred = windCode(test(:,1), test(:,2), theta(1), quant_range_basis, coordinate, turbineDia, Ct, sp, fPower, x1);
        err = zeros(1, sum(N(1:4)));
        for i = 1:sum(N(1:4))
            err(i) = (sum((test_actual(i,:) - test_pred(i,:)).^2));
        end
    fn = err;
end
end

%% wind power model
function powerHat = windCode(kw, sig0, direction, ws)
offset = 0;
powerHat = Howland_model(kw, sig0, direction, offset, ws);
end